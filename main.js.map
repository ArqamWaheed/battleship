{"version":3,"file":"main.js","mappings":"mBAAO,SAASA,EAAeC,GAC7B,MAAMC,EAAYC,SAASC,cAAcH,GACnCI,EAAOH,EAAUE,cAAc,SAErC,IAAK,IAAIE,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,EAAM,GAAIA,IAAO,CACjC,MAAMC,EAAOL,SAASM,cAAc,OACpCD,EAAKE,UAAY,YAEL,IAARJ,GAAqB,IAARC,EACfC,EAAKG,UAAUC,IAAI,eACF,IAARN,GACTE,EAAKG,UAAUC,IAAI,eACnBJ,EAAKK,YAAcC,OAAOC,aAAa,GAAKR,IAC3B,IAARA,GACTC,EAAKG,UAAUC,IAAI,eACnBJ,EAAKK,YAAcP,EAAIU,aAEvBR,EAAKS,QAAQX,IAAMA,EAAM,EACzBE,EAAKS,QAAQV,IAAMA,EAAM,GAG3BF,EAAKa,YAAYV,EACnB,CAGFN,EAAUgB,YAAYb,EACxB,CC3BA,MAAMc,EAAW,WACf,IAAIC,EAGAC,EACAC,EACAC,EAJAC,EAAY,CAAC,EACbC,EAAa,OAKjB,MAsBMC,EAAS,SAAUC,EAAWC,GAC7BJ,EAAUG,IACfH,EAAUG,GAAWE,QAASC,IAC5B,IACEA,EAASF,EACX,CAAE,MAAOG,GACPC,QAAQD,MAAM,YAAYJ,cAAuBI,EACnD,GAEJ,EAWME,EAAW,WACf,MAAO,CACLb,cACAG,SAEJ,EAMA,SAASW,IACP,OAAOT,CACT,CA+BA,MAAO,CACLU,UA/EgB,SAAUR,EAAWG,GAChCN,EAAUG,KACbH,EAAUG,GAAa,IAEzBH,EAAUG,GAAWS,KAAKN,EAC5B,EA2EEO,YAxEkB,SAAUV,EAAWG,GAClCN,EAAUG,KACfH,EAAUG,GAAaH,EAAUG,GAAWW,OAAQC,GAAOA,IAAOT,GACpE,EAsEEJ,SACAc,eApDqB,WACrB,OAAOpB,CACT,EAmDEa,WACAQ,WAtBiB,WACjBrB,EAAcA,IAAgBC,EAASC,EAAWD,EAElDK,EAAO,eAAgBO,IAEzB,EAkBES,gBAhBsB,SAAUC,EAAaC,GAC7ClB,EAAO,kBAAmB,CACxBN,YAAaA,EACbuB,YAAaA,EACbC,SAAUA,EACVV,iBAEJ,EAUEW,cA7CF,SAAuBC,GACrBrB,EAAaqB,CACf,EA4CEZ,gBACAa,eA/DqB,SAAUD,GAC/B1B,EAAc0B,CAEhB,EA6DEE,WAjGiB,SAAUC,EAAQC,GACnC7B,EAAS4B,EACT3B,EAAW4B,EACX3B,EAAS,KACTH,EAAc6B,CAChB,EA6FEE,aAzCF,WACE,OAAI9B,EAAO+B,qBACT7B,EAASD,EACTI,EAAO,UAAWO,MACX,KACEX,EAAS8B,sBAClB7B,EAASF,EACTK,EAAO,UAAWO,MACX,EAGX,EAgCD,CA5GgB,GCAjB,SAASoB,EAAKC,GACZ,IAAIC,EAAe,EAsBnB,MAAO,CAAEC,IApBG,WACVD,GAEF,EAiBcE,OAfC,WACb,OAAIF,GAAgBD,CAItB,EAUsBI,gBARE,WACtB,OAAOH,CACT,EAMuCI,UAJrB,WAChB,OAAOL,CACT,EAGF,CCrBA,MAAMM,EACJ,WAAAC,CAAYC,GACVC,KAAKC,aAAeF,EACpBC,KAAKE,SAAW,IAAKZ,EAAK,GAAIS,KAAM,YACpCC,KAAKG,WAAa,IAAKb,EAAK,GAAIS,KAAM,cACtCC,KAAKI,QAAU,IAAKd,EAAK,GAAIS,KAAM,WACnCC,KAAKK,WAAa,IAAKf,EAAK,GAAIS,KAAM,cACtCC,KAAKM,WAAa,IAAKhB,EAAK,GAAIS,KAAM,cACtCC,KAAKO,WAAa,IAAKjB,EAAK,GAAIS,KAAM,cACtCC,KAAKQ,WAAa,IAAKlB,EAAK,GAAIS,KAAM,cACtCC,KAAKS,MAAQT,MAAK,IAClBA,KAAKU,cAAgBV,MAAK,IAC1BA,KAAKW,YAAc,EACrB,CAEAC,eAAiB,KACfZ,KAAKE,SAAW,IAAKZ,EAAK,GAAIS,KAAM,YACpCC,KAAKG,WAAa,IAAKb,EAAK,GAAIS,KAAM,cACtCC,KAAKI,QAAU,IAAKd,EAAK,GAAIS,KAAM,WACnCC,KAAKK,WAAa,IAAKf,EAAK,GAAIS,KAAM,cACtCC,KAAKM,WAAa,IAAKhB,EAAK,GAAIS,KAAM,cACtCC,KAAKO,WAAa,IAAKjB,EAAK,GAAIS,KAAM,cACtCC,KAAKQ,WAAa,IAAKlB,EAAK,GAAIS,KAAM,cACtCC,KAAKS,MAAQT,MAAK,IAClBA,KAAKU,cAAgBV,MAAK,IAC1BA,KAAKW,YAAc,IAGrB,KACE,MAAMF,EAAQ,GACd,IAAK,IAAII,EAAI,EAAGA,EAAI,GAAIA,IACtBJ,EAAMI,GAAKC,MAAM,IAAIC,KAAK,MAE5B,OAAON,CACT,CAEA,KACE,MAAMC,EAAgB,GACtB,IAAK,IAAIG,EAAI,EAAGA,EAAI,GAAIA,IACtB,IAAK,IAAIG,EAAI,EAAGA,EAAI,GAAIA,IACtBN,EAAcrC,KAAK,CAACwC,EAAGG,IAG3B,OAAON,CACT,CAEA,SAAAO,CAAUpC,EAAUqC,EAAeC,GACjC,MAAOC,EAAIC,GAAMH,GACVI,EAAIC,GAAMJ,EAGjB,GADAnB,MAAK,EAAmBoB,EAAIC,IAEzBrB,MAAK,EAA2BoB,EAAIC,KACpCrB,MAAK,EAA2BsB,EAAIC,GAErC,MAAMC,MAAM,yBAGd,GADAxB,KAAKS,MAAMW,GAAIC,GAAMxC,EACjBuC,EAAKE,IAAO,EACd,IAAK,IAAIT,EAAI,EAAGA,EAAIY,KAAKC,IAAIN,EAAKE,GAAM,EAAGT,IACzCb,KAAKS,MAAMgB,KAAKE,IAAIP,EAAIE,GAAMT,GAAGQ,GAAMxC,EAG3C,GAAIwC,EAAKE,IAAO,EACd,IAAK,IAAIV,EAAI,EAAGA,EAAIY,KAAKC,IAAIL,EAAKE,GAAM,EAAGV,IACzCb,KAAKS,MAAMW,GAAIK,KAAKE,IAAIN,EAAIE,GAAMV,GAAKhC,EAG3CmB,KAAKS,MAAMa,GAAIC,GAAM1C,CAEvB,CAEA,GAAmB+C,EAAGC,GAEpB,GAAID,EAAI,GAAKC,EAAI,GAAKD,EAAI,GAAKC,EAAI,EAAG,MAAML,MAAM,gBACpD,CAEA,GAA2BI,EAAGC,GAE5B,OAA4B,OAArB7B,KAAKS,MAAMmB,GAAGC,EACvB,CAEAC,cAAiBjE,IACf,GAAIA,EAAKR,YAAY4C,aAAahD,aAAe+C,KAAKC,aAAc,CAClE,MAAOmB,EAAIC,GAAMxD,EAAKe,YACtBoB,MAAK,EAAmBoB,EAAIC,GAE5B,MAAMU,EAAkB/B,KAAKW,YAAYqB,KACvC,EAAEJ,EAAGC,KAAOD,IAAMR,GAAMS,IAAMR,GAGhC,GAAKrB,MAAK,EAA2BoB,EAAIC,IAAQU,EAI1C,IAAKA,EAKV,MAAMP,MAAM,+BAFZ,OAFAxB,KAAKW,YAAYtC,KAAKR,EAAKe,kBAC3BxB,EAAS0B,cAAc,OAIzB,CAPE,OAFAkB,KAAKS,MAAMW,GAAIC,GAAI5B,WACnBrC,EAAS0B,cAAc,MAS3B,GAGF,iBAAAO,GACE,OACEW,KAAKE,SAASR,UACdM,KAAKG,WAAWT,UAChBM,KAAKI,QAAQV,UACbM,KAAKK,WAAWX,UAChBM,KAAKM,WAAWZ,UAChBM,KAAKO,WAAWb,UAChBM,KAAKQ,WAAWd,QAEpB,CAEA,sBAAAuC,GAEE,MAAMC,EAAQ,CACZ,CAAEC,KAAMnC,KAAKE,SAAUX,OAAQ,GAC/B,CAAE4C,KAAMnC,KAAKG,WAAYZ,OAAQ,GACjC,CAAE4C,KAAMnC,KAAKI,QAASb,OAAQ,GAC9B,CAAE4C,KAAMnC,KAAKK,WAAYd,OAAQ,GACjC,CAAE4C,KAAMnC,KAAKM,WAAYf,OAAQ,GACjC,CAAE4C,KAAMnC,KAAKO,WAAYhB,OAAQ,GACjC,CAAE4C,KAAMnC,KAAKQ,WAAYjB,OAAQ,IAInC,IAAK,MAAM,KAAE4C,EAAI,OAAE5C,KAAY2C,EAAO,CACpC,IAAIE,GAAS,EAEb,MAAQA,GAAQ,CAEd,MAAMC,EAAaZ,KAAKa,SAAW,GAG7BV,EAAIH,KAAKc,MAAsB,GAAhBd,KAAKa,UACpBT,EAAIJ,KAAKc,MAAsB,GAAhBd,KAAKa,UAG1B,IAAIE,EAAOZ,EACPa,EAAOZ,EASX,GAPIQ,EACFG,EAAOZ,GAAKrC,EAAS,GAErBkD,EAAOZ,GAAKtC,EAAS,GAInBiD,EAAO,IAAMC,EAAO,GACtB,IAEE,IAAIC,GAAW,EAEf,GAAIL,EACF,IAAK,IAAIxB,EAAI,EAAGA,EAAItB,EAAQsB,IAAK,CAE/B,IAAKb,MAAK,EAA2B4B,EAAIf,EAAGgB,GAAI,CAC9Ca,GAAW,EACX,KACF,CAGA,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC/B,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC/B,GAAW,IAAPD,GAAmB,IAAPC,EAAU,SAE1B,MAAMC,EAASjB,EAAIf,EAAI8B,EACjBG,EAASjB,EAAIe,EAGnB,GAAIC,GAAU,GAAKA,EAAS,IAAMC,GAAU,GAAKA,EAAS,KACnD9C,MAAK,EAA2B6C,EAAQC,GAAS,CACpDJ,GAAW,EACX,KACF,CAEJ,CACA,IAAKA,EAAU,KACjB,CACA,IAAKA,EAAU,KACjB,MAEA,IAAK,IAAI7B,EAAI,EAAGA,EAAItB,EAAQsB,IAAK,CAE/B,IAAKb,MAAK,EAA2B4B,EAAGC,EAAIhB,GAAI,CAC9C6B,GAAW,EACX,KACF,CAGA,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC/B,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC/B,GAAW,IAAPD,GAAmB,IAAPC,EAAU,SAE1B,MAAMC,EAASjB,EAAIe,EACbG,EAASjB,EAAIhB,EAAI+B,EAGvB,GAAIC,GAAU,GAAKA,EAAS,IAAMC,GAAU,GAAKA,EAAS,KACnD9C,MAAK,EAA2B6C,EAAQC,GAAS,CACpDJ,GAAW,EACX,KACF,CAEJ,CACA,IAAKA,EAAU,KACjB,CACA,IAAKA,EAAU,KACjB,CAGEA,IACF1C,KAAKiB,UAAUkB,EAAM,CAACP,EAAGC,GAAI,CAACW,EAAMC,IACpCL,GAAS,EAEb,CAAE,MAAOpE,GAEP,QACF,CAEJ,CACF,CACF,EClOF,MAAMV,EAAS,IAAIuC,EAAU,UACvBtC,EAAW,IAAIsC,EAAU,YAE/BzC,EAAS6B,WAAW3B,EAAQC,GAE5BD,EAAO2E,yBACP1E,EAAS0E,yBCTT,MAAMc,EAAe3G,SAASC,cAAc,WACtC2G,EAAiB5G,SAASC,cAAc,WACxC4G,EAAc7G,SAASC,cAAc,iBACrC6G,EAAgB9G,SAASC,cAAc,iBACvC8G,EAAsB/G,SAASC,cAAc,yBAC7C+G,EAAoBhH,SAASC,cAAc,uBAC3CgH,EAAgBjH,SAASC,cAAc,mBACvCiH,EAAclH,SAASC,cAAc,mBACrCkH,EAAYnH,SAASC,cAAc,kBCNlC,SAASmH,EAAYhG,GAC1B6F,EAAczG,UAAU6G,OAAO,QAKjC,SAAwBjG,GACtB+F,EAAUzG,YAAc,iBAAiBU,IAE3C,CAPEkG,CAAelG,EAEjB,CCMA,SAASmG,IACP,IAAK,MAAM9C,KAAKvD,EAAOmD,MACrB,IAAK,MAAMO,KAAK1D,EAAOmD,MACM,OAAvBnD,EAAOmD,MAAMI,GAAGG,IACIiC,EAAY5G,cAChC,cAAcwE,iBAAiBG,OAEnBpE,UAAUC,IAAI,OAIpC,CA+CA,SAAS+G,EAAyBC,EAAYC,GAC5C,MAAOlC,EAAGC,GAAKgC,EACf,OAAIC,EAAOrD,MAAMmB,GAAGC,IAAI9B,KAAa+D,EAAOrD,MAAMmB,GAAGC,GAAG9B,KACjD,IACT,CChEAmD,EAAca,iBAAiB,QAAS,SAAUC,GAChD,GAAI5G,EAASqB,kBAAoBnB,ICXJ2G,EDYDD,EAAEE,QCTpBtH,UAAUuH,SAAS,eAC1BF,EAAQrH,UAAUuH,SAAS,iBAC3BF,EAAQrH,UAAUuH,SAAS,SAC3BF,EAAQrH,UAAUuH,SAAS,QDMS,CACnC,MAAMvF,EDmDZ,SAA4BqF,GAG1B,MAAO,CAFQG,SAASH,EAAQ/G,QAAQX,IAAK,IAC9B6H,SAASH,EAAQ/G,QAAQV,IAAK,IAE/C,CCvD0B6H,CAAmBL,EAAEE,QACnCrF,EAAW+E,EAAyBhF,EAAarB,GACvDH,EAASuB,gBAAgBC,EAAaC,GACP,GAA3BzB,EAASgC,iBACXhC,EAASsB,aEVjB4F,iBACE,MAAM1F,ECNR,WACE,MAAM2F,EAAQ9C,KAAKc,MAAMd,KAAKa,SAAW/E,EAASmD,cAAcnB,QAChE,OAAOhC,EAASmD,cAAc8D,OAAOD,EAAO,GAAG,EACjD,CDGsBE,GACd5F,EAAW+E,EAAyBhF,EAAatB,SAJnC,IAAIoH,QAASC,GAAYC,WAAWD,EAK5C,MACZvH,EAASuB,gBAAgBC,EAAaC,GACP,GAA3BzB,EAASgC,gBACXhC,EAASsB,YAEb,CFGQmG,GAEJ,CCpBJ,IAA+BZ,CDsB/B,GInBAX,EAAYS,iBAAiB,QAAS,KACpCP,MCUFpG,EAASgB,UAAU,eNYnB,SAA4B0G,GACtBA,EAAMzH,cAAgBC,GACxByF,EAAagC,MAAMC,QAAU,GAC7BhC,EAAe+B,MAAMC,QAAU,IAE/BjC,EAAagC,MAAMC,QAAU,EAC7BhC,EAAe+B,MAAMC,QAAU,GAEnC,GMnBA5H,EAASgB,UAAU,kBAAmBd,EAAOwE,eAC7C1E,EAASgB,UAAU,kBAAmBb,EAASuE,eAC/C1E,EAASgB,UAAU,kBN0BnB,SAAsBP,GACpB,MAAO+D,EAAGC,GAAKhE,EAAKe,YAEdqG,EACJpH,EAAKR,cAAgBC,EAAS4F,EAAgBD,EAE1CiC,EACJrH,EAAKR,cAAgBC,EAAS6F,EAAsBC,EAEpC6B,EAAc5I,cAC9B,cAAcuF,iBAAiBC,OAEvBjF,UAAUC,IAAIgB,EAAKM,iBACP,OAAlBN,EAAKgB,UAEPqG,EACG7I,cAAc,eAAewB,EAAKgB,oCAClCjC,UAAUC,IAAI,MAErB,GM5CAO,EAASgB,UAAU,UAAWb,EAASqD,gBACvCxD,EAASgB,UAAU,UAAWd,EAAOsD,gBACrCxD,EAASgB,UAAU,UNwDnB,SAAuBP,GAErB2F,EADe3F,EAAKL,OAAOyC,cAvCN7D,SAAS+I,iBAAiB,mBAClCrH,QAAQsH,GAASA,EAAMxI,UAAUyI,OAAO,QACrDnC,EAAcoC,kBACdrC,EAAYqC,kBAuCZrJ,EAAe,WACfA,EAAe,WACfqB,EAAO2E,yBACP1E,EAAS0E,yBACT0B,GAEF,GMjEAvG,EAASgB,UAAU,UAAW,IAAMhB,EAAS6B,WAAW3B,EAAQC,IAGhEnB,SAAS2H,iBAAiB,mBAAoB,KAC5C9H,EAAe,WACfA,EAAe,WACf0H,K","sources":["webpack://webpack-template/./src/ui/utils/gameboardInit.js","webpack://webpack-template/./src/core/state/AppState.js","webpack://webpack-template/./src/core/models/Ships.js","webpack://webpack-template/./src/core/models/Gameboard.js","webpack://webpack-template/./src/core/services/gameboardService.js","webpack://webpack-template/./src/ui/utils/DOMcache.js","webpack://webpack-template/./src/ui/components/Modal.js","webpack://webpack-template/./src/ui/components/Gameboard.js","webpack://webpack-template/./src/ui/events/gameboardEvents.js","webpack://webpack-template/./src/ui/utils/Validations.js","webpack://webpack-template/./src/ui/components/Computer.js","webpack://webpack-template/./src/core/services/computerLogic.js","webpack://webpack-template/./src/ui/events/modalEvents.js","webpack://webpack-template/./src/index.js"],"sourcesContent":["export function createGameGrid(containerId) {\n  const container = document.querySelector(containerId);\n  const grid = container.querySelector(\".grid\");\n\n  for (let row = 0; row < 11; row++) {\n    for (let col = 0; col < 11; col++) {\n      const cell = document.createElement(\"div\");\n      cell.className = \"grid-cell\";\n\n      if (row === 0 && col === 0) {\n        cell.classList.add(\"header-cell\");\n      } else if (row === 0) {\n        cell.classList.add(\"header-cell\");\n        cell.textContent = String.fromCharCode(64 + col);\n      } else if (col === 0) {\n        cell.classList.add(\"header-cell\");\n        cell.textContent = row.toString();\n      } else {\n        cell.dataset.row = row - 1;\n        cell.dataset.col = col - 1;\n      }\n\n      grid.appendChild(cell);\n    }\n  }\n\n  container.appendChild(grid);\n}\n","const AppState = (function () {\n  let currentTurn;\n  let observers = {};\n  let turnAttack = \"miss\";\n  let Player;\n  let Computer;\n  let winner;\n\n  const initialize = function (player, computer) {\n    Player = player;\n    Computer = computer;\n    winner = null;\n    currentTurn = player;\n  };\n\n  // Subscribe to specific events\n  const subscribe = function (eventType, callback) {\n    if (!observers[eventType]) {\n      observers[eventType] = [];\n    }\n    observers[eventType].push(callback);\n  };\n\n  // Unsubscribe from events\n  const unsubscribe = function (eventType, callback) {\n    if (!observers[eventType]) return;\n    observers[eventType] = observers[eventType].filter((cb) => cb !== callback);\n  };\n\n  // Notify all subscribers of a specific event\n  const notify = function (eventType, data) {\n    if (!observers[eventType]) return;\n    observers[eventType].forEach((callback) => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error(`Error in ${eventType} observer:`, error);\n      }\n    });\n  };\n\n  const setCurrentTurn = function (value) {\n    currentTurn = value;\n    return;\n  };\n\n  const getCurrentTurn = function () {\n    return currentTurn;\n  };\n\n  const getState = function () {\n    return {\n      currentTurn,\n      winner,\n    };\n  };\n\n  function SetTurnAttack(value) {\n    turnAttack = value;\n  }\n\n  function GetTurnAttack() {\n    return turnAttack;\n  }\n\n  function checkGameEnd() {\n    if (Player.checkAllShipsSunk()) {\n      winner = Computer;\n      notify(\"endGame\", getState());\n      return true;\n    } else if (Computer.checkAllShipsSunk()) {\n      winner = Player;\n      notify(\"endGame\", getState());\n      return true;\n    }\n    return false;\n  }\n\n  const switchTurn = function () {\n    currentTurn = currentTurn === Player ? Computer : Player;\n\n    notify(\"turnSwitched\", getState());\n    return;\n  };\n\n  const attackInitiated = function (coordinates, shipName) {\n    notify(\"attackInitiated\", {\n      currentTurn: currentTurn,\n      coordinates: coordinates,\n      shipName: shipName,\n      GetTurnAttack,\n    });\n  };\n\n  return {\n    subscribe,\n    unsubscribe,\n    notify,\n    getCurrentTurn,\n    getState,\n    switchTurn,\n    attackInitiated,\n    SetTurnAttack,\n    GetTurnAttack,\n    setCurrentTurn,\n    initialize,\n    checkGameEnd,\n  };\n})();\n\nexport { AppState };\n","function Ship(length) {\n  let hitsReceived = 0;\n\n  const hit = function () {\n    hitsReceived++;\n    return;\n  };\n\n  const isSunk = function () {\n    if (hitsReceived >= length) {\n      return true;\n    }\n    return false;\n  };\n\n  const getHitsReceived = function () {\n    return hitsReceived;\n  };\n\n  const getLength = function () {\n    return length;\n  };\n\n  return { hit, isSunk, getHitsReceived, getLength };\n}\n\nexport { Ship };\n","import { AppState } from \"../state/AppState.js\";\nimport { Ship } from \"./Ships.js\";\n\nclass Gameboard {\n  constructor(name) {\n    this.instanceName = name;\n    this.aircraft = { ...Ship(5), name: \"aircraft\" };\n    this.battleship = { ...Ship(4), name: \"battleship\" };\n    this.cruiser = { ...Ship(3), name: \"cruiser\" };\n    this.destroyer1 = { ...Ship(2), name: \"destroyer1\" };\n    this.destroyer2 = { ...Ship(2), name: \"destroyer2\" };\n    this.submarine1 = { ...Ship(1), name: \"submarine1\" };\n    this.submarine2 = { ...Ship(1), name: \"submarine2\" };\n    this.board = this.#initializeGameboard();\n    this.playableMoves = this.#initializePlayableMoves();\n    this.missedShots = []; // 2D Array containing all the missed shots\n  }\n\n  resetGameboard = () => {\n    this.aircraft = { ...Ship(5), name: \"aircraft\" };\n    this.battleship = { ...Ship(4), name: \"battleship\" };\n    this.cruiser = { ...Ship(3), name: \"cruiser\" };\n    this.destroyer1 = { ...Ship(2), name: \"destroyer1\" };\n    this.destroyer2 = { ...Ship(2), name: \"destroyer2\" };\n    this.submarine1 = { ...Ship(1), name: \"submarine1\" };\n    this.submarine2 = { ...Ship(1), name: \"submarine2\" };\n    this.board = this.#initializeGameboard();\n    this.playableMoves = this.#initializePlayableMoves();\n    this.missedShots = []; // 2D Array containing all the missed shots\n  };\n\n  #initializeGameboard() {\n    const board = [];\n    for (let i = 0; i < 10; i++) {\n      board[i] = Array(10).fill(null);\n    }\n    return board;\n  }\n\n  #initializePlayableMoves() {\n    const playableMoves = [];\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        playableMoves.push([i, j]);\n      }\n    }\n    return playableMoves;\n  }\n\n  placeShip(shipName, startingCoord, endingCoord) {\n    const [x1, y1] = startingCoord;\n    const [x2, y2] = endingCoord;\n\n    this.#verifyCoordinates(x1, y1); // Error handling\n    if (\n      !this.#verifyOccupiedCoordinates(x1, y1) ||\n      !this.#verifyOccupiedCoordinates(x2, y2)\n    )\n      throw Error(\"Spot already occupied\");\n\n    this.board[x1][y1] = shipName;\n    if (x1 - x2 !== 0) {\n      for (let i = 1; i < Math.abs(x1 - x2) + 1; i++) {\n        this.board[Math.min(x1, x2) + i][y1] = shipName;\n      }\n    }\n    if (y1 - y2 !== 0) {\n      for (let i = 1; i < Math.abs(y1 - y2) + 1; i++) {\n        this.board[x1][Math.min(y1, y2) + i] = shipName;\n      }\n    }\n    this.board[x2][y2] = shipName;\n    return;\n  }\n\n  #verifyCoordinates(x, y) {\n    // Checks if its out of bound or occupied\n    if (x > 9 || y > 9 || x < 0 || y < 0) throw Error(\"Out Of Bounds\");\n  }\n\n  #verifyOccupiedCoordinates(x, y) {\n    // returns true if spot is not occupied\n    return this.board[x][y] === null ? true : false;\n  }\n\n  receiveAttack = (data) => {\n    if (data.currentTurn.instanceName.toString() !== this.instanceName) {\n      const [x1, y1] = data.coordinates;\n      this.#verifyCoordinates(x1, y1);\n\n      const isAlreadyMissed = this.missedShots.some(\n        ([x, y]) => x === x1 && y === y1,\n      );\n\n      if (!this.#verifyOccupiedCoordinates(x1, y1) && !isAlreadyMissed) {\n        this.board[x1][y1].hit();\n        AppState.SetTurnAttack(\"hit\");\n        return;\n      } else if (!isAlreadyMissed) {\n        this.missedShots.push(data.coordinates);\n        AppState.SetTurnAttack(\"miss\");\n        return;\n      } else {\n        throw Error(\"Coordinate already attacked\");\n      }\n    }\n  };\n\n  checkAllShipsSunk() {\n    return (\n      this.aircraft.isSunk() &&\n      this.battleship.isSunk() &&\n      this.cruiser.isSunk() &&\n      this.destroyer1.isSunk() &&\n      this.destroyer2.isSunk() &&\n      this.submarine1.isSunk() &&\n      this.submarine2.isSunk()\n    );\n  }\n\n  randomizeShipPlacement() {\n    // List of ships with their corresponding objects and lengths\n    const ships = [\n      { ship: this.aircraft, length: 5 },\n      { ship: this.battleship, length: 4 },\n      { ship: this.cruiser, length: 3 },\n      { ship: this.destroyer1, length: 2 },\n      { ship: this.destroyer2, length: 2 },\n      { ship: this.submarine1, length: 1 },\n      { ship: this.submarine2, length: 1 },\n    ];\n\n    // Place each ship randomly\n    for (const { ship, length } of ships) {\n      let placed = false;\n\n      while (!placed) {\n        // Random orientation: 0 = horizontal, 1 = vertical\n        const isVertical = Math.random() < 0.5;\n\n        // Random starting position\n        const x = Math.floor(Math.random() * 10);\n        const y = Math.floor(Math.random() * 10);\n\n        // Calculate ending position based on orientation\n        let endX = x;\n        let endY = y;\n\n        if (isVertical) {\n          endX = x + (length - 1);\n        } else {\n          endY = y + (length - 1);\n        }\n\n        // Check if placement is valid\n        if (endX < 10 && endY < 10) {\n          try {\n            // Check if all positions are free and have gaps around them\n            let canPlace = true;\n            \n            if (isVertical) {\n              for (let i = 0; i < length; i++) {\n                // Check the cell itself\n                if (!this.#verifyOccupiedCoordinates(x + i, y)) {\n                  canPlace = false;\n                  break;\n                }\n                \n                // Check surrounding cells for gaps (8 directions)\n                for (let dx = -1; dx <= 1; dx++) {\n                  for (let dy = -1; dy <= 1; dy++) {\n                    if (dx === 0 && dy === 0) continue; // Skip the cell itself\n                    \n                    const checkX = x + i + dx;\n                    const checkY = y + dy;\n                    \n                    // Only check if within bounds\n                    if (checkX >= 0 && checkX < 10 && checkY >= 0 && checkY < 10) {\n                      if (!this.#verifyOccupiedCoordinates(checkX, checkY)) {\n                        canPlace = false;\n                        break;\n                      }\n                    }\n                  }\n                  if (!canPlace) break;\n                }\n                if (!canPlace) break;\n              }\n            } else {\n              for (let i = 0; i < length; i++) {\n                // Check the cell itself\n                if (!this.#verifyOccupiedCoordinates(x, y + i)) {\n                  canPlace = false;\n                  break;\n                }\n                \n                // Check surrounding cells for gaps (8 directions)\n                for (let dx = -1; dx <= 1; dx++) {\n                  for (let dy = -1; dy <= 1; dy++) {\n                    if (dx === 0 && dy === 0) continue; // Skip the cell itself\n                    \n                    const checkX = x + dx;\n                    const checkY = y + i + dy;\n                    \n                    // Only check if within bounds\n                    if (checkX >= 0 && checkX < 10 && checkY >= 0 && checkY < 10) {\n                      if (!this.#verifyOccupiedCoordinates(checkX, checkY)) {\n                        canPlace = false;\n                        break;\n                      }\n                    }\n                  }\n                  if (!canPlace) break;\n                }\n                if (!canPlace) break;\n              }\n            }\n\n            if (canPlace) {\n              this.placeShip(ship, [x, y], [endX, endY]);\n              placed = true;\n            }\n          } catch (error) {\n            // If placement fails, try again\n            continue;\n          }\n        }\n      }\n    }\n  }\n}\n\nexport { Gameboard };\n","import { Gameboard } from \"../models/Gameboard.js\";\nimport { AppState } from \"../state/AppState.js\";\n\nconst Player = new Gameboard(\"Player\");\nconst Computer = new Gameboard(\"Computer\");\n\nAppState.initialize(Player, Computer);\n\nPlayer.randomizeShipPlacement();\nComputer.randomizeShipPlacement();\n\nexport { Player, Computer };\n","const $boardPlayer = document.querySelector(\".board1\");\nconst $boardComputer = document.querySelector(\".board2\");\nconst $gridPlayer = document.querySelector(\".board1 .grid\");\nconst $gridComputer = document.querySelector(\".board2 .grid\");\nconst $statusGridComputer = document.querySelector(\"#computer-status-grid\");\nconst $statusGridPlayer = document.querySelector(\"#player-status-grid\");\nconst $gameEndModal = document.querySelector(\"#game-end-modal\");\nconst $restartBtn = document.querySelector(\"#restart-button\");\nconst $modalMsg = document.querySelector(\"#modal-message\");\n\nexport {\n  $boardPlayer,\n  $boardComputer,\n  $gridPlayer,\n  $gridComputer,\n  $statusGridComputer,\n  $statusGridPlayer,\n  $gameEndModal,\n  $restartBtn,\n  $modalMsg,\n};\n","import { $gameEndModal, $modalMsg } from \"../utils/DOMcache.js\";\n\nexport function toggleModal(winner) {\n  $gameEndModal.classList.toggle(\"show\");\n  setModalWinner(winner);\n  return;\n}\n\nfunction setModalWinner(winner) {\n  $modalMsg.textContent = `The winner is ${winner}!`;\n  return;\n}\n","import { Player, Computer } from \"../../core/services/gameboardService.js\";\nimport {\n  $gridPlayer,\n  $gridComputer,\n  $boardPlayer,\n  $boardComputer,\n  $statusGridPlayer,\n  $statusGridComputer,\n} from \"../utils/DOMcache.js\";\nimport { createGameGrid } from \"../utils/gameboardInit.js\";\nimport { toggleModal } from \"./Modal.js\";\n\nfunction renderShips() {\n  for (const i in Player.board) {\n    for (const j in Player.board) {\n      if (Player.board[i][j] !== null) {\n        const $shipGridCell = $gridPlayer.querySelector(\n          `[data-row=\"${i}\"][data-col=\"${j}\"]`,\n        );\n        $shipGridCell.classList.add(\"ship\");\n      }\n    }\n  }\n}\n\n// Observer function - reacts to turnSwitches\nfunction renderSwitchedTurn(state) {\n  if (state.currentTurn === Player) {\n    $boardPlayer.style.opacity = 0.5;\n    $boardComputer.style.opacity = 1;\n  } else {\n    $boardPlayer.style.opacity = 1;\n    $boardComputer.style.opacity = 0.5;\n  }\n}\n\nfunction flushGameboards() {\n  // Remove all hit classes from status grids\n  const allHitBlocks = document.querySelectorAll('.ship-block.hit');\n  allHitBlocks.forEach(block => block.classList.remove('hit'));\n  $gridComputer.replaceChildren();\n  $gridPlayer.replaceChildren();\n}\nfunction renderAttack(data) {\n  const [x, y] = data.coordinates;\n\n  const $gridToRender =\n    data.currentTurn === Player ? $gridComputer : $gridPlayer;\n\n  const $StatusGridToRender =\n    data.currentTurn === Player ? $statusGridComputer : $statusGridPlayer;\n\n  const $gridCell = $gridToRender.querySelector(\n    `[data-row=\"${x}\"][data-col=\"${y}\"]`,\n  );\n  $gridCell.classList.add(data.GetTurnAttack());\n  if (data.shipName !== null) {\n    // Render the small grid if hit connects\n    $StatusGridToRender\n      .querySelector(`[data-ship=\"${data.shipName}\"] .ship-block:not(.hit)`)\n      .classList.add(\"hit\");\n  }\n}\n\nfunction extractCoordinates(element) {\n  const xCoord = parseInt(element.dataset.row, 10);\n  const yCoord = parseInt(element.dataset.col, 10);\n  return [xCoord, yCoord];\n}\n\nfunction identifyShipAtCoordinate(coordinate, object) {\n  const [x, y] = coordinate;\n  if (object.board[x][y]?.name) return object.board[x][y].name;\n  return null;\n}\n\nfunction renderGameEnd(data) {\n  const winner = data.winner.instanceName;\n  toggleModal(winner);\n  flushGameboards();\n  createGameGrid(\".board1\");\n  createGameGrid(\".board2\");\n  Player.randomizeShipPlacement();\n  Computer.randomizeShipPlacement();\n  renderShips();\n  return;\n}\n\nexport {\n  renderShips,\n  extractCoordinates,\n  renderAttack,\n  renderSwitchedTurn,\n  renderGameEnd,\n  identifyShipAtCoordinate,\n  flushGameboards\n};\n","import { Computer, Player } from \"../../core/services/gameboardService.js\";\nimport { AppState } from \"../../core/state/AppState.js\";\nimport { computerPlayMove } from \"../components/Computer.js\";\nimport {\n  extractCoordinates,\n  identifyShipAtCoordinate,\n} from \"../components/Gameboard.js\";\nimport { $gridComputer } from \"../utils/DOMcache.js\";\nimport { validateGridCellClick } from \"../utils/Validations.js\";\n\n$gridComputer.addEventListener(\"click\", function (e) {\n  if (AppState.getCurrentTurn() == Player) {\n    if (validateGridCellClick(e.target)) {\n      const coordinates = extractCoordinates(e.target);\n      const shipName = identifyShipAtCoordinate(coordinates, Computer);\n      AppState.attackInitiated(coordinates, shipName);\n      if (AppState.checkGameEnd() == false) {\n        AppState.switchTurn();\n        computerPlayMove();\n      }\n    }\n  }\n});\n","function validateGridCellClick(element) {\n  // Validates if you're actually clicking the game grid\n  if (\n    element.classList.contains(\"grid-cell\") &&\n    !element.classList.contains(\"header-cell\") &&\n    !element.classList.contains(\"hit\") &&\n    !element.classList.contains(\"miss\")\n  )\n    return true;\n  return false;\n}\n\nexport { validateGridCellClick };\n","import { computerCoordinateToPlay } from \"../../core/services/computerLogic.js\";\nimport { Player } from \"../../core/services/gameboardService.js\";\nimport { AppState } from \"../../core/state/AppState.js\";\nimport { identifyShipAtCoordinate } from \"./Gameboard.js\";\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nasync function computerPlayMove() {\n  const coordinates = computerCoordinateToPlay(); // get the coordinates u want to play\n  const shipName = identifyShipAtCoordinate(coordinates, Player);\n  await delay(500);\n  AppState.attackInitiated(coordinates, shipName);\n  if (AppState.checkGameEnd() == false) {\n    AppState.switchTurn();\n  }\n}\n\nexport { computerPlayMove };\n","import { Computer } from \"./gameboardService.js\";\n\nfunction computerCoordinateToPlay() {\n  const index = Math.floor(Math.random() * Computer.playableMoves.length);\n  return Computer.playableMoves.splice(index, 1)[0];\n}\n\nexport { computerCoordinateToPlay };\n","import { toggleModal } from \"../components/Modal.js\";\nimport { $restartBtn } from \"../utils/DOMcache.js\";\n\n$restartBtn.addEventListener(\"click\", () => {\n  toggleModal();\n});\n","import \"./styles.css\";\nimport { createGameGrid } from \"./ui/utils/gameboardInit.js\";\nimport { Computer, Player } from \"./core/services/gameboardService.js\";\nimport \"./ui/components/Gameboard.js\";\nimport {\n  renderAttack,\n  renderGameEnd,\n  renderShips,\n  renderSwitchedTurn,\n} from \"./ui/components/Gameboard.js\";\nimport \"./ui/events/gameboardEvents.js\";\nimport { AppState } from \"./core/state/AppState.js\";\nimport \"./ui/events/modalEvents.js\";\n\nAppState.subscribe(\"turnSwitched\", renderSwitchedTurn);\nAppState.subscribe(\"attackInitiated\", Player.receiveAttack);\nAppState.subscribe(\"attackInitiated\", Computer.receiveAttack);\nAppState.subscribe(\"attackInitiated\", renderAttack);\nAppState.subscribe(\"endGame\", Computer.resetGameboard);\nAppState.subscribe(\"endGame\", Player.resetGameboard);\nAppState.subscribe(\"endGame\", renderGameEnd);\nAppState.subscribe(\"endGame\", () => AppState.initialize(Player, Computer));\n\n// Initialize the grid\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  createGameGrid(\".board1\");\n  createGameGrid(\".board2\");\n  renderShips();\n});\n"],"names":["createGameGrid","containerId","container","document","querySelector","grid","row","col","cell","createElement","className","classList","add","textContent","String","fromCharCode","toString","dataset","appendChild","AppState","currentTurn","Player","Computer","winner","observers","turnAttack","notify","eventType","data","forEach","callback","error","console","getState","GetTurnAttack","subscribe","push","unsubscribe","filter","cb","getCurrentTurn","switchTurn","attackInitiated","coordinates","shipName","SetTurnAttack","value","setCurrentTurn","initialize","player","computer","checkGameEnd","checkAllShipsSunk","Ship","length","hitsReceived","hit","isSunk","getHitsReceived","getLength","Gameboard","constructor","name","this","instanceName","aircraft","battleship","cruiser","destroyer1","destroyer2","submarine1","submarine2","board","playableMoves","missedShots","resetGameboard","i","Array","fill","j","placeShip","startingCoord","endingCoord","x1","y1","x2","y2","Error","Math","abs","min","x","y","receiveAttack","isAlreadyMissed","some","randomizeShipPlacement","ships","ship","placed","isVertical","random","floor","endX","endY","canPlace","dx","dy","checkX","checkY","$boardPlayer","$boardComputer","$gridPlayer","$gridComputer","$statusGridComputer","$statusGridPlayer","$gameEndModal","$restartBtn","$modalMsg","toggleModal","toggle","setModalWinner","renderShips","identifyShipAtCoordinate","coordinate","object","addEventListener","e","element","target","contains","parseInt","extractCoordinates","async","index","splice","computerCoordinateToPlay","Promise","resolve","setTimeout","computerPlayMove","state","style","opacity","$gridToRender","$StatusGridToRender","querySelectorAll","block","remove","replaceChildren"],"sourceRoot":""}